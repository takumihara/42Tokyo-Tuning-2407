worker_processes  auto;  # コア数と同じ数まで増やすと良いかも

worker_rlimit_nofile  4096;  # worker_connections の 4 倍程度（感覚値）

events {
    worker_connections 1024;
}

http {
    log_format json escape=json '{'
        '"time": "$time_iso8601",'
        '"host": "$remote_addr",'
        '"port": "$remote_port",'
        '"method": "$request_method",'
        '"uri": "$request_uri",'
        '"status": "$status",'
        '"body_bytes": "$body_bytes_sent",'
        '"referer": "$http_referer",'
        '"ua": "$http_user_agent",'
        '"request_time": "$request_time",'
        '"response_time": "$upstream_response_time"'
        '}';

    access_log /var/log/nginx/access2.log json;
    access_log off;

    sendfile    on;
    tcp_nopush  on;
    tcp_nodelay on;

    # Keepalive 設定
    keepalive_timeout 65;
    keepalive_requests 500;

    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:8080;
    }

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m;
    proxy_temp_path  /var/cache/nginx/tmp;

    server {
        listen 443 ssl;

        ssl_certificate /da/tls/fullchain1.pem;
        ssl_certificate_key /da/tls/privkey1.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/user_image {
            proxy_pass http://backend;
            proxy_cache my_cache;
            proxy_cache_valid 200 1h;  # 200 OKのレスポンスを1時間キャッシュ
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Proxy-Cache $upstream_cache_status;  # キャッシュのステータスをレスポンスヘッダーに追加
        }

        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 80;

        return 301 https://$host$request_uri;
    }
}

